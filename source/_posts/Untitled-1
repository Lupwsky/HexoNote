{% tabs 选项卡 %}
<!-- tab Java -->
呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……
<!-- endtab -->

<!-- tab XML -->
你好
<!-- endtab -->

<!-- tab CSS -->
**这是选项卡 3** 哇, 你找到我了！φ(≧ω≦*)♪～
<!-- endtab -->
{% endtabs %}

# Spring 容器底层依赖的技术
Spring 通过简单的配置文件可以完成 bean 的实例化和依赖注入, 能完成这些功能主要依靠 Java 所提供的反射功能, 除此之外, 同时依赖 Java 资源文件的访问功能。

## 反射

鉴于篇幅, 见文章:

## 资源访问
Spring 通过读取配置文件来获取 Bena De 依赖关系, 需要使用进行资源的访问, JDK 所提供的资源访问类 java.net.URL、File类等并不能很好的访问类路径和 WEB 容器上下文的资源文件, 因此 Spring 设计了一个 Resource 接口, 并提供了相关的实现类, 以便于在各种场景下方便的访问资源问件, 具体的实现类如下图所示:

![IMAGE](Spring笔记-SpringIoC容器相关知识/20180327233518.png)


启动 Nginx
/user/sbin/nginx -c /etc/nginx/nginx.config


alias ls='ls -G'
alias lc='clear; ls'
alias ll='ls -l'
alias vim='mvim'
  
export M2_HOME=/Users/lupengwei/Maven/apache-maven-3.5.0
export PATH=$PATH:$M2_HOME/bin

export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar

export ROCKETMQ_HOME=/Users/lupengwei/RocketMQ/alibaba-rocketmq
export PATH=$PATH:$ROCKETMQ_HOME/bin

export PATH=$PATH:/Users/lupengwei/Library/Android/sdk/platform-tools

172.18.17.156



---
title: Java-多线程之ThreadLocal(二)
date: 2018-05-19 10:19:30
categories: Java
---

ThreadLocal 用来提供线程内部的局部变量的，并非是用于解决数据共享的，数据共享海兽需要使用关键字 synchronsize，上一篇笔记了解了 ThreadLocal 的基础使用，这篇笔记继续了解 ThreadLocal 的使用和实现原理。

# ThreadLocal 主要方法

ThreadLocal 对外提供的方法只有四个：

| 方法 | 用途 |
| --- | --- |
| public void set(T value) | 设置当前线程的线程局部变量的值 |
| public T get() | 返回当前线程所对应的线程局部变量 |
| public void remove() | 将当前线程局部变量的值删除，该方法是JDK 5.0新增的方法，可以加快内存回收的速度 (因为在线程结束的时候，对应该线程的局部变量是自动被垃圾机制自动回收的) |
| protected Object initialValue() | 返回该线程局部变量的初始值，是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次 |

<!-- more  -->

# ThreadLocal 实现原理

首先我们要了解的是 ThreadLocal 里面的内部静态类 ThreadLocalMap，具体这个类里面怎么实现的这里不去深究，ThreadLocalMap 类里面相关的方法如下图所示：

![IMAGE](Java-多线程之ThreadLocal(二)/20180521133228.jpg)

从 ThreadLocalMap 构造方法和 set 方法可以看出 ThreadLocalMap 作为数据结构存值时是以 ThreadLocal 对象作为 key 的，：

```java
ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {
    // 具体实现
}

private void set(ThreadLocal<?> key, Object value) {
    // 具体实现
}
```

在来看看 ThradLocal 的 set 方法，如下：

```java

```